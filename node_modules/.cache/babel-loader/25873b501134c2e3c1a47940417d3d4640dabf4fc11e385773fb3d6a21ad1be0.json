{"ast":null,"code":"'use strict';\n\nvar React = require('react');\nvar PropTypes = require('prop-types');\nvar internals = require('@sanity/block-content-to-hyperscript/internals');\nvar _require = require('./targets/dom'),\n  serializers = _require.serializers,\n  serializeSpan = _require.serializeSpan,\n  renderProps = _require.renderProps;\nvar getImageUrl = internals.getImageUrl,\n  blocksToNodes = internals.blocksToNodes,\n  mergeSerializers = internals.mergeSerializers;\nvar renderNode = React.createElement;\nvar SanityBlockContent = function SanityBlockContent(props) {\n  var customSerializers = mergeSerializers(SanityBlockContent.defaultSerializers, props.serializers);\n  var blockProps = Object.assign({}, renderProps, props, {\n    serializers: customSerializers,\n    blocks: props.blocks || []\n  });\n  return blocksToNodes(renderNode, blockProps, serializers, serializeSpan);\n};\n\n// Expose default serializers to the user\nSanityBlockContent.defaultSerializers = serializers;\n\n// Expose logic for building image URLs from an image reference/node\nSanityBlockContent.getImageUrl = getImageUrl;\nSanityBlockContent.propTypes = {\n  className: PropTypes.string,\n  renderContainerOnSingleChild: PropTypes.bool,\n  ignoreUnknownTypes: PropTypes.bool,\n  // When rendering images, we need project id and dataset, unless images are materialized\n  projectId: PropTypes.string,\n  dataset: PropTypes.string,\n  imageOptions: PropTypes.object,\n  serializers: PropTypes.shape({\n    // Common overrides\n    types: PropTypes.object,\n    marks: PropTypes.object,\n    // Less common overrides\n    list: PropTypes.func,\n    listItem: PropTypes.func,\n    // Low-level serializers\n    block: PropTypes.func,\n    span: PropTypes.func\n  }),\n  blocks: PropTypes.oneOfType([PropTypes.arrayOf(PropTypes.shape({\n    _type: PropTypes.string.isRequired\n  })), PropTypes.shape({\n    _type: PropTypes.string.isRequired\n  })]).isRequired\n};\nSanityBlockContent.defaultProps = {\n  ignoreUnknownTypes: true,\n  renderContainerOnSingleChild: false,\n  serializers: {},\n  imageOptions: {}\n};\nmodule.exports = SanityBlockContent;","map":{"version":3,"names":["React","require","PropTypes","internals","serializers","serializeSpan","renderProps","getImageUrl","blocksToNodes","mergeSerializers","renderNode","createElement","SanityBlockContent","props","customSerializers","defaultSerializers","blockProps","Object","assign","blocks","propTypes","className","string","renderContainerOnSingleChild","bool","ignoreUnknownTypes","projectId","dataset","imageOptions","object","shape","types","marks","list","func","listItem","block","span","oneOfType","arrayOf","_type","isRequired","defaultProps","module","exports"],"sources":["C:\\Projects\\seattle-community-fridge\\node_modules\\@sanity\\block-content-to-react\\src\\BlockContent.js"],"sourcesContent":["const React = require('react')\nconst PropTypes = require('prop-types')\nconst internals = require('@sanity/block-content-to-hyperscript/internals')\nconst {serializers, serializeSpan, renderProps} = require('./targets/dom')\n\nconst {getImageUrl, blocksToNodes, mergeSerializers} = internals\nconst renderNode = React.createElement\n\nconst SanityBlockContent = (props) => {\n  const customSerializers = mergeSerializers(\n    SanityBlockContent.defaultSerializers,\n    props.serializers\n  )\n\n  const blockProps = Object.assign({}, renderProps, props, {\n    serializers: customSerializers,\n    blocks: props.blocks || [],\n  })\n\n  return blocksToNodes(renderNode, blockProps, serializers, serializeSpan)\n}\n\n// Expose default serializers to the user\nSanityBlockContent.defaultSerializers = serializers\n\n// Expose logic for building image URLs from an image reference/node\nSanityBlockContent.getImageUrl = getImageUrl\n\nSanityBlockContent.propTypes = {\n  className: PropTypes.string,\n  renderContainerOnSingleChild: PropTypes.bool,\n  ignoreUnknownTypes: PropTypes.bool,\n\n  // When rendering images, we need project id and dataset, unless images are materialized\n  projectId: PropTypes.string,\n  dataset: PropTypes.string,\n  imageOptions: PropTypes.object,\n\n  serializers: PropTypes.shape({\n    // Common overrides\n    types: PropTypes.object,\n    marks: PropTypes.object,\n\n    // Less common overrides\n    list: PropTypes.func,\n    listItem: PropTypes.func,\n\n    // Low-level serializers\n    block: PropTypes.func,\n    span: PropTypes.func,\n  }),\n\n  blocks: PropTypes.oneOfType([\n    PropTypes.arrayOf(\n      PropTypes.shape({\n        _type: PropTypes.string.isRequired,\n      })\n    ),\n    PropTypes.shape({\n      _type: PropTypes.string.isRequired,\n    }),\n  ]).isRequired,\n}\n\nSanityBlockContent.defaultProps = {\n  ignoreUnknownTypes: true,\n  renderContainerOnSingleChild: false,\n  serializers: {},\n  imageOptions: {},\n}\n\nmodule.exports = SanityBlockContent\n"],"mappings":";;AAAA,IAAMA,KAAA,GAAQC,OAAA,CAAQ,OAAR,CAAd;AACA,IAAMC,SAAA,GAAYD,OAAA,CAAQ,YAAR,CAAlB;AACA,IAAME,SAAA,GAAYF,OAAA,CAAQ,gDAAR,CAAlB;eACkDA,OAAA,CAAQ,eAAR,C;EAA3CG,W,YAAAA,W;EAAaC,a,YAAAA,a;EAAeC,W,YAAAA,W;IAE5BC,W,GAAgDJ,S,CAAhDI,W;EAAaC,a,GAAmCL,S,CAAnCK,a;EAAeC,gB,GAAoBN,S,CAApBM,gB;AACnC,IAAMC,UAAA,GAAaV,KAAA,CAAMW,aAAzB;AAEA,IAAMC,kBAAA,GAAqB,SAArBA,kBAAqBA,CAACC,KAAD,EAAW;EACpC,IAAMC,iBAAA,GAAoBL,gBAAA,CACxBG,kBAAA,CAAmBG,kBADK,EAExBF,KAAA,CAAMT,WAFkB,CAA1B;EAKA,IAAMY,UAAA,GAAaC,MAAA,CAAOC,MAAP,CAAc,EAAd,EAAkBZ,WAAlB,EAA+BO,KAA/B,EAAsC;IACvDT,WAAA,EAAaU,iBAD0C;IAEvDK,MAAA,EAAQN,KAAA,CAAMM,MAAN,IAAgB;EAF+B,CAAtC,CAAnB;EAKA,OAAOX,aAAA,CAAcE,UAAd,EAA0BM,UAA1B,EAAsCZ,WAAtC,EAAmDC,aAAnD,CAAP;AACD,CAZD;;AAcA;AACAO,kBAAA,CAAmBG,kBAAnB,GAAwCX,WAAxC;;AAEA;AACAQ,kBAAA,CAAmBL,WAAnB,GAAiCA,WAAjC;AAEAK,kBAAA,CAAmBQ,SAAnB,GAA+B;EAC7BC,SAAA,EAAWnB,SAAA,CAAUoB,MADQ;EAE7BC,4BAAA,EAA8BrB,SAAA,CAAUsB,IAFX;EAG7BC,kBAAA,EAAoBvB,SAAA,CAAUsB,IAHD;EAK7B;EACAE,SAAA,EAAWxB,SAAA,CAAUoB,MANQ;EAO7BK,OAAA,EAASzB,SAAA,CAAUoB,MAPU;EAQ7BM,YAAA,EAAc1B,SAAA,CAAU2B,MARK;EAU7BzB,WAAA,EAAaF,SAAA,CAAU4B,KAAV,CAAgB;IAC3B;IACAC,KAAA,EAAO7B,SAAA,CAAU2B,MAFU;IAG3BG,KAAA,EAAO9B,SAAA,CAAU2B,MAHU;IAK3B;IACAI,IAAA,EAAM/B,SAAA,CAAUgC,IANW;IAO3BC,QAAA,EAAUjC,SAAA,CAAUgC,IAPO;IAS3B;IACAE,KAAA,EAAOlC,SAAA,CAAUgC,IAVU;IAW3BG,IAAA,EAAMnC,SAAA,CAAUgC;EAXW,CAAhB,CAVgB;EAwB7Bf,MAAA,EAAQjB,SAAA,CAAUoC,SAAV,CAAoB,CAC1BpC,SAAA,CAAUqC,OAAV,CACErC,SAAA,CAAU4B,KAAV,CAAgB;IACdU,KAAA,EAAOtC,SAAA,CAAUoB,MAAV,CAAiBmB;EADV,CAAhB,CADF,CAD0B,EAM1BvC,SAAA,CAAU4B,KAAV,CAAgB;IACdU,KAAA,EAAOtC,SAAA,CAAUoB,MAAV,CAAiBmB;EADV,CAAhB,CAN0B,CAApB,EASLA;AAjC0B,CAA/B;AAoCA7B,kBAAA,CAAmB8B,YAAnB,GAAkC;EAChCjB,kBAAA,EAAoB,IADY;EAEhCF,4BAAA,EAA8B,KAFE;EAGhCnB,WAAA,EAAa,EAHmB;EAIhCwB,YAAA,EAAc;AAJkB,CAAlC;AAOAe,MAAA,CAAOC,OAAP,GAAiBhC,kBAAjB"},"metadata":{},"sourceType":"script","externalDependencies":[]}