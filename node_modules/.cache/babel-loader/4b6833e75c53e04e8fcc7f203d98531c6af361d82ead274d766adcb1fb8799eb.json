{"ast":null,"code":"\"use strict\";\n\nvar objectAssign = require('object-assign');\nvar buildMarksTree = require('./buildMarksTree');\nvar nestLists = require('./nestLists');\nvar generateKeys = require('./generateKeys');\nvar mergeSerializers = require('./mergeSerializers'); // Properties to extract from props and pass to serializers as options\n\nvar optionProps = ['projectId', 'dataset', 'imageOptions', 'ignoreUnknownTypes'];\nvar isDefined = function isDefined(val) {\n  return typeof val !== 'undefined';\n};\nvar defaults = {\n  imageOptions: {},\n  ignoreUnknownTypes: true\n};\nfunction blocksToNodes(h, properties, defaultSerializers, serializeSpan) {\n  var props = objectAssign({}, defaults, properties);\n  var rawBlocks = Array.isArray(props.blocks) ? props.blocks : [props.blocks];\n  var keyedBlocks = generateKeys(rawBlocks);\n  var blocks = nestLists(keyedBlocks, props.listNestMode);\n  var serializers = mergeSerializers(defaultSerializers, props.serializers || {});\n  var options = optionProps.reduce(function (opts, key) {\n    var value = props[key];\n    if (isDefined(value)) {\n      opts[key] = value;\n    }\n    return opts;\n  }, {});\n  function serializeNode(node, index, siblings, isInline) {\n    if (isList(node)) {\n      return serializeList(node);\n    }\n    if (isListItem(node)) {\n      return serializeListItem(node, findListItemIndex(node, siblings));\n    }\n    if (isSpan(node)) {\n      return serializeSpan(node, serializers, index, {\n        serializeNode: serializeNode\n      });\n    }\n    return serializeBlock(node, index, isInline);\n  }\n  function findListItemIndex(node, siblings) {\n    var index = 0;\n    for (var i = 0; i < siblings.length; i++) {\n      if (siblings[i] === node) {\n        return index;\n      }\n      if (!isListItem(siblings[i])) {\n        continue;\n      }\n      index++;\n    }\n    return index;\n  }\n  function serializeBlock(block, index, isInline) {\n    var tree = buildMarksTree(block);\n    var children = tree.map(function (node, i, siblings) {\n      return serializeNode(node, i, siblings, true);\n    });\n    var blockProps = {\n      key: block._key || \"block-\".concat(index),\n      node: block,\n      isInline: isInline,\n      serializers: serializers,\n      options: options\n    };\n    return h(serializers.block, blockProps, children);\n  }\n  function serializeListItem(block, index) {\n    var key = block._key;\n    var tree = buildMarksTree(block);\n    var children = tree.map(serializeNode);\n    return h(serializers.listItem, {\n      node: block,\n      serializers: serializers,\n      index: index,\n      key: key,\n      options: options\n    }, children);\n  }\n  function serializeList(list) {\n    var type = list.listItem;\n    var level = list.level;\n    var key = list._key;\n    var children = list.children.map(serializeNode);\n    return h(serializers.list, {\n      key: key,\n      level: level,\n      type: type,\n      options: options\n    }, children);\n  } // Default to false, so `undefined` will evaluate to the default here\n\n  var renderContainerOnSingleChild = Boolean(props.renderContainerOnSingleChild);\n  var nodes = blocks.map(serializeNode);\n  if (renderContainerOnSingleChild || nodes.length > 1) {\n    var containerProps = props.className ? {\n      className: props.className\n    } : {};\n    return h(serializers.container, containerProps, nodes);\n  }\n  if (nodes[0]) {\n    return nodes[0];\n  }\n  return typeof serializers.empty === 'function' ? h(serializers.empty) : serializers.empty;\n}\nfunction isList(block) {\n  return block._type === 'list' && block.listItem;\n}\nfunction isListItem(block) {\n  return block._type === 'block' && block.listItem;\n}\nfunction isSpan(block) {\n  return typeof block === 'string' || block.marks || block._type === 'span';\n}\nmodule.exports = blocksToNodes;","map":{"version":3,"names":["objectAssign","require","buildMarksTree","nestLists","generateKeys","mergeSerializers","optionProps","isDefined","val","defaults","imageOptions","ignoreUnknownTypes","blocksToNodes","h","properties","defaultSerializers","serializeSpan","props","rawBlocks","Array","isArray","blocks","keyedBlocks","listNestMode","serializers","options","reduce","opts","key","value","serializeNode","node","index","siblings","isInline","isList","serializeList","isListItem","serializeListItem","findListItemIndex","isSpan","serializeBlock","i","length","block","tree","children","map","blockProps","_key","concat","listItem","list","type","level","renderContainerOnSingleChild","Boolean","nodes","containerProps","className","container","empty","_type","marks","module","exports"],"sources":["C:\\Projects\\seattle-community-fridge\\node_modules\\@sanity\\block-content-to-hyperscript\\src\\blocksToNodes.js"],"sourcesContent":["const objectAssign = require('object-assign')\nconst buildMarksTree = require('./buildMarksTree')\nconst nestLists = require('./nestLists')\nconst generateKeys = require('./generateKeys')\nconst mergeSerializers = require('./mergeSerializers')\n\n// Properties to extract from props and pass to serializers as options\nconst optionProps = ['projectId', 'dataset', 'imageOptions', 'ignoreUnknownTypes']\nconst isDefined = val => typeof val !== 'undefined'\nconst defaults = {imageOptions: {}, ignoreUnknownTypes: true}\n\nfunction blocksToNodes(h, properties, defaultSerializers, serializeSpan) {\n  const props = objectAssign({}, defaults, properties)\n  const rawBlocks = Array.isArray(props.blocks) ? props.blocks : [props.blocks]\n  const keyedBlocks = generateKeys(rawBlocks)\n  const blocks = nestLists(keyedBlocks, props.listNestMode)\n  const serializers = mergeSerializers(defaultSerializers, props.serializers || {})\n\n  const options = optionProps.reduce((opts, key) => {\n    const value = props[key]\n    if (isDefined(value)) {\n      opts[key] = value\n    }\n    return opts\n  }, {})\n\n  function serializeNode(node, index, siblings, isInline) {\n    if (isList(node)) {\n      return serializeList(node)\n    }\n\n    if (isListItem(node)) {\n      return serializeListItem(node, findListItemIndex(node, siblings))\n    }\n\n    if (isSpan(node)) {\n      return serializeSpan(node, serializers, index, {serializeNode})\n    }\n\n    return serializeBlock(node, index, isInline)\n  }\n\n  function findListItemIndex(node, siblings) {\n    let index = 0\n    for (let i = 0; i < siblings.length; i++) {\n      if (siblings[i] === node) {\n        return index\n      }\n\n      if (!isListItem(siblings[i])) {\n        continue\n      }\n\n      index++\n    }\n\n    return index\n  }\n\n  function serializeBlock(block, index, isInline) {\n    const tree = buildMarksTree(block)\n    const children = tree.map((node, i, siblings) => serializeNode(node, i, siblings, true))\n    const blockProps = {\n      key: block._key || `block-${index}`,\n      node: block,\n      isInline,\n      serializers,\n      options\n    }\n\n    return h(serializers.block, blockProps, children)\n  }\n\n  function serializeListItem(block, index) {\n    const key = block._key\n    const tree = buildMarksTree(block)\n    const children = tree.map(serializeNode)\n    return h(serializers.listItem, {node: block, serializers, index, key, options}, children)\n  }\n\n  function serializeList(list) {\n    const type = list.listItem\n    const level = list.level\n    const key = list._key\n    const children = list.children.map(serializeNode)\n    return h(serializers.list, {key, level, type, options}, children)\n  }\n\n  // Default to false, so `undefined` will evaluate to the default here\n  const renderContainerOnSingleChild = Boolean(props.renderContainerOnSingleChild)\n\n  const nodes = blocks.map(serializeNode)\n  if (renderContainerOnSingleChild || nodes.length > 1) {\n    const containerProps = props.className ? {className: props.className} : {}\n    return h(serializers.container, containerProps, nodes)\n  }\n\n  if (nodes[0]) {\n    return nodes[0]\n  }\n\n  return typeof serializers.empty === 'function' ? h(serializers.empty) : serializers.empty\n}\n\nfunction isList(block) {\n  return block._type === 'list' && block.listItem\n}\n\nfunction isListItem(block) {\n  return block._type === 'block' && block.listItem\n}\n\nfunction isSpan(block) {\n  return typeof block === 'string' || block.marks || block._type === 'span'\n}\n\nmodule.exports = blocksToNodes\n"],"mappings":"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"},"metadata":{},"sourceType":"script","externalDependencies":[]}